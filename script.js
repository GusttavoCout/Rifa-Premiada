// Fun√ß√£o para buscar o tempo final do sorteio da API
async function fetchEndTime() {
    try {
        const response = await fetch('https://raw.githubusercontent.com/GusttavoCout/Rifa-Premiada/refs/heads/main/sorteio.json?v=' + Date.now());
        const data = await response.json();
        return new Date(data.endTime).getTime(); // Converte para timestamp
    } catch (error) {
        console.error('Erro ao buscar o tempo final do sorteio:', error);
        return null;
    }
}

// Fun√ß√£o para iniciar o timer
function startTimer(endTime) {
    function updateTimer() {
        const now = new Date().getTime();
        const timeLeft = endTime - now;

        if (timeLeft <= 0) {
            document.getElementById("timer").innerHTML = "üéâ O sorteio come√ßou!";
            return;
        }

        const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
        const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

        document.getElementById("days").textContent = String(days).padStart(2, "0");
        document.getElementById("hours").textContent = String(hours).padStart(2, "0");
        document.getElementById("minutes").textContent = String(minutes).padStart(2, "0");
        document.getElementById("seconds").textContent = String(seconds).padStart(2, "0");

        requestAnimationFrame(updateTimer);
    }

    updateTimer();
}

// Configura√ß√£o do Instagram (fun√ß√£o vazia, pois o bot√£o foi removido)
function setupInstagramButton() {
    console.log("Bot√£o do Instagram removido. Nada para configurar.");
}

// Seguran√ßa (bloqueio de bot√£o direito, F12, etc.)
function setupSecurity() {
    document.addEventListener("contextmenu", function (event) {
        event.preventDefault();
    });

    document.addEventListener("keydown", function (event) {
        if (
            event.key === "F12" || 
            (event.ctrlKey && event.shiftKey && event.key === "I") || 
            (event.ctrlKey && event.key === "U")
        ) {
            event.preventDefault();
        }
    });

    setInterval(() => {
        const before = new Date().getTime();
        debugger;
        const after = new Date().getTime();
        if (after - before > 100) {
            window.location.href = "about:blank";
        }
    }, 1000);
}

// Intera√ß√£o com o mouse (fazer os trevos desaparecerem ao passar o mouse)
function setupCloverInteraction() {
    const trevos = document.querySelectorAll(".clover");

    trevos.forEach((trevo) => {
        trevo.addEventListener("mouseenter", () => {
            trevo.style.opacity = "0"; // Faz o trevo desaparecer
            trevo.style.transition = "opacity 0.5s ease"; // Adiciona uma transi√ß√£o suave
        });

        trevo.addEventListener("mouseleave", () => {
            trevo.style.opacity = "0.7"; // Faz o trevo reaparecer
        });
    });
}

// Fun√ß√£o para disparar confetes
function triggerConfetti() {
    console.log("Disparando confetes...");

    confetti({
        particleCount: 150,
        spread: 70,
        origin: { y: 0.6 },
    });

    // Verifique se o canvas foi criado
    const canvas = document.querySelector('canvas');
    if (canvas) {
        console.log("Canvas encontrado:", canvas);
    } else {
        console.error("Canvas n√£o encontrado!");
    }
}

// Inicia os confetes automaticamente ao carregar a p√°gina
window.onload = triggerConfetti;

// Inicializa√ß√£o
async function initialize() {
    // Timer
    let endTime = await fetchEndTime(); // Busca o tempo final do sorteio online

    if (!endTime) {
        // Se n√£o conseguir buscar o tempo final, define um tempo padr√£o (6 dias, 4 horas e 20 minutos)
        const dias = 6;
        const horas = 4;
        const minutos = 20;

        const tempoTotal = (dias * 86400000) + (horas * 3600000) + (minutos * 60000);
        endTime = new Date().getTime() + tempoTotal;
    }

    startTimer(endTime);

    // Instagram
    setupInstagramButton();

    // Seguran√ßa
    setupSecurity();

    // Intera√ß√£o com os trevos
    setupCloverInteraction();

    // Confetes e dinheiro caindo
    triggerConfetti();
}

// Lista de nomes populares brasileiros (alguns com sobrenome, outros sem)
const brazilianNames = [
    "Jo√£o Silva", "Maria", "Carlos Oliveira", "Ana", "Pedro Santos",
    "Lucas", "Fernanda Lima", "Rafael", "Juliana Ribeiro", "Gabriel",
    "Mariana", "Rodrigo Gomes", "Patr√≠cia", "Bruno Carvalho", "Camila",
    "Gustavo Henrique", "Isabela", "Thiago", "Amanda Costa", "Felipe",
    "Larissa", "Diego Almeida", "Vanessa", "Ricardo", "Beatriz",
    "Roberto", "Tatiane", "Leonardo", "Cristiane", "Marcos Fernandes",
    "Eduardo", "Carolina", "Vin√≠cius", "Daniela", "Andr√©",
    "Tatiana", "Renato", "Priscila", "F√°bio", "Simone",
    "Alexandre", "M√°rcia", "Paulo", "C√≠ntia", "Maur√≠cio",
    "Sandra", "Rog√©rio", "Luciana", "Marcelo", "Elaine",
    "Adriana", "Bruno", "Carla", "Daniel", "Ester",
    "Rafaela", "Jos√©", "Cl√°udia", "Ant√¥nio", "Luiza",
    "F√°bio", "Helena", "Ricardo", "Isabella", "Vitor"
];

// Fun√ß√£o para selecionar um nome aleat√≥rio da lista
function getRandomBrazilianName() {
    const randomIndex = Math.floor(Math.random() * brazilianNames.length);
    return brazilianNames[randomIndex];
}

// Fun√ß√£o para simular a entrada de novos membros
async function simulateNewMember() {
    const notification = document.getElementById("notification");
    const notificationText = document.getElementById("notificationText");
    const notificationSound = document.getElementById("notificationSound");
    const bellIcon = document.querySelector(".bell-icon");

    // Busca um nome aleat√≥rio da lista
    const randomName = getRandomBrazilianName();

    // Atualiza o texto da notifica√ß√£o
    notificationText.textContent = `${randomName} acabou de entrar no grupo!`;

    // Mostra a notifica√ß√£o
    notification.style.opacity = "1";
    notification.style.transform = "scale(1)";
    notificationSound.play();

    // Remove a classe de anima√ß√£o (se j√° estiver aplicada)
    bellIcon.classList.remove("ring");

    // For√ßa um reflow no navegador (reinicia a anima√ß√£o)
    void bellIcon.offsetWidth;

    // Adiciona a classe de anima√ß√£o ao sininho
    bellIcon.classList.add("ring");

    // Remove a classe de anima√ß√£o ap√≥s o t√©rmino
    setTimeout(() => {
        bellIcon.classList.remove("ring");
    }, 500); // Tempo da anima√ß√£o (0.5s)

    // Esconde a notifica√ß√£o ap√≥s 5 segundos
    setTimeout(() => {
        notification.style.opacity = "0";
        notification.style.transform = "scale(0.8)";
    }, 5000);

    // Agenda a pr√≥xima notifica√ß√£o ap√≥s 20 segundos
    setTimeout(simulateNewMember, 20000);
}

// Inicia a primeira notifica√ß√£o ap√≥s 10 segundos
setTimeout(simulateNewMember, 10000);

// Inicia tudo quando a p√°gina carregar
window.onload = initialize;

// Configura√ß√£o das part√≠culas
particlesJS("particles-js", {
    particles: {
        number: {
            value: 30, // Quantidade de part√≠culas
            density: {
                enable: true,
                value_area: 800, // √Årea de densidade das part√≠culas
            },
        },
        color: {
            value: "#ffffff", // Cor das part√≠culas (branco)
        },
        shape: {
            type: "circle", // Formato das part√≠culas (c√≠rculo)
        },
        opacity: {
            value: 0.5, // Opacidade das part√≠culas
            random: true,
            anim: {
                enable: true,
                speed: 1,
                opacity_min: 0.1,
                sync: false,
            },
        },
        size: {
            value: 3, // Tamanho das part√≠culas
            random: true,
            anim: {
                enable: true,
                speed: 2,
                size_min: 0.1,
                sync: false,
            },
        },
        line_linked: {
            enable: false, // Desativa as linhas entre as part√≠culas
        },
        move: {
            enable: true,
            speed: 1, // Velocidade de movimento das part√≠culas
            direction: "none",
            random: true,
            straight: false,
            out_mode: "out", // Comportamento ao sair do cont√™iner
            bounce: false,
            attract: {
                enable: false,
                rotateX: 600,
                rotateY: 1200,
            },
        },
    },
    interactivity: {
        detect_on: "canvas",
        events: {
            onhover: {
                enable: false, // Desativa intera√ß√£o ao passar o mouse
            },
            onclick: {
                enable: false, // Desativa intera√ß√£o ao clicar
            },
            resize: true,
        },
    },
    retina_detect: true,
});

// Garante que a p√°gina n√£o role al√©m do conte√∫do
window.addEventListener('scroll', function () {
    if (window.scrollY < 0) {
        window.scrollTo(0, 0); // Impede rolagem para cima al√©m do topo
    }
    if (window.scrollY + window.innerHeight > document.body.scrollHeight) {
        window.scrollTo(0, document.body.scrollHeight - window.innerHeight); // Impede rolagem para baixo al√©m do final
    }
});